name: OpenMM-Build-Wheels

env:
  GIT_REVISION: '064cee2'
  VERSION_SUFFIX: 'beta'

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  mac:
    runs-on: ${{ matrix.os }}
    name: "${{ matrix.os }} ${{ matrix.python-version}}"
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        os: [macos-latest, macos-13]
        requirements: [macos]

    steps:
      - uses: actions/checkout@v4

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: build-env
          create-args: >-
            python=${{ matrix.python-version }}
          init-shell: bash

      - name: "Install dependencies"
        shell: bash -l {0}
        run: pip install -v -r devtools/requirements/${{ matrix.requirements }}.txt

      - name: "Install Homebrew"
        uses: Homebrew/actions/setup-homebrew@master

      - name: "Install Doxygen with brew"
        run: brew install doxygen

      - name: "Set SDK on MacOS (if needed)"
        run: source devtools/scripts/install_macos_sdk.sh

      - name: "Check out OpenMM source code"
        run: |
          git clone https://github.com/openmm/openmm.git
          cd openmm
          git checkout $GIT_REVISION
          git apply ${{ github.workspace }}/devtools/patches/library_path.patch

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          cd openmm
          mkdir build
          cd build
          cmake .. -DCMAKE_INSTALL_PREFIX=${HOME}/openmm-install

      - name: "Build OpenMM"
        shell: bash -l {0}
        run: |
          cd openmm/build
          make -j4 install
          make -j4 PythonInstall

      - name: "Build wheel"
        shell: bash -l {0}
        run: |
          cd openmm/build
          make PythonBdistWheel
          export DYLD_LIBRARY_PATH=${HOME}/openmm-install/lib
          cd python/dist
          python ${{ github.workspace }}/devtools/scripts/add_plugins_and_headers.py "${HOME}/openmm-install"
          python ${{ github.workspace }}/devtools/scripts/fix_mac_rpath.py .
          python -m delocate.cmd.delocate_wheel -w fixed -v *.whl -L "../OpenMM.libs/lib" --sanitize-rpaths \
            --exclude libOpenMM.dylib \
            --exclude libOpenMMOpenCL.dylib \
            --exclude libOpenMMDrude.dylib \
            --exclude libOpenMMDrudeOpenCL.dylib \
            --exclude libOpenMMAmoeba.dylib \
            --exclude libOpenMMAmoebaOpenCL.dylib \
            --exclude libOpenMMRPMD.dylib \
            --exclude libOpenMMRPMDOpenCL.dylib

      - name: "Test the wheel"
        shell: bash -l {0}
        run: |
          set -x
          python -m venv "${HOME}/test_env"
          source "${HOME}/test_env/bin/activate"
          cd openmm/build/python/dist
          pip install --pre fixed/*
          python -m openmm.testInstallation
          python -c "import openmm as mm; print(mm.version.openmm_library_path)"
          python -c "import openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Upload the wheel"
        uses: actions/upload-artifact@v4
        with:
          name: openmm-wheel-${{matrix.os}}-${{matrix.python-version}}
          path: openmm/build/python/dist/fixed
          retention-days: 10

  linux:
    runs-on: ${{ matrix.os }}
    container:
      image: quay.io/pypa/manylinux_2_28_x86_64
    name: "${{ matrix.name }} ${{ matrix.python-version}} CUDA ${{ matrix.cuda-version }} HIP ${{ matrix.hip-version }}"
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        cuda-version: ["12-3", "13-0"]
        name: [Linux x86]
        os: [ubuntu-latest]
        requirements: [linux]
        include:
          - cuda-version: "12-3"
            cuda-arch: "x86_64"
            hip-version: "6"
          - cuda-version: "13-0"
            cuda-arch: "x86_64"
            hip-version: "6"

    steps:
      - uses: actions/checkout@v3

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: build-env
          create-args: >-
            python=${{ matrix.python-version }}
          init-shell: bash

      - name: "Install dependencies with pip"
        shell: bash -l {0}
        run: pip install -v -r devtools/requirements/${{ matrix.requirements }}.txt

      - name: "Install dependencies with yum"
        run: |
          yum -y install doxygen zip opencl-headers ocl-icd

      - name: "Install CUDA"
        run: |
          dnf config-manager --add-repo https://developer.download.nvidia.com/compute/cuda/repos/rhel8/${{ matrix.cuda-arch }}/cuda-rhel8.repo
          dnf -y install cuda-compiler-${{ matrix.cuda-version }}.${{ matrix.cuda-arch }} \
                         cuda-libraries-${{ matrix.cuda-version }}.${{ matrix.cuda-arch }} \
                         cuda-libraries-devel-${{ matrix.cuda-version }}.${{ matrix.cuda-arch }}

      - name: "Install HIP"
        run: |
          yum install -y epel-release
          yum install -y https://repo.radeon.com/amdgpu-install/6.2.2/el/8.10/amdgpu-install-6.2.60202-1.el8.noarch.rpm
          yum install -y rocm-device-libs hip-devel hip-runtime-amd hipcc

      - name: "Check out OpenMM source code"
        run: |
          git clone https://github.com/openmm/openmm.git
          cd openmm
          git checkout $GIT_REVISION
          git apply $GITHUB_WORKSPACE/devtools/patches/library_path.patch
          git apply $GITHUB_WORKSPACE/devtools/patches/cxx11_abi.patch
          git apply $GITHUB_WORKSPACE/devtools/patches/extras_require.patch
          git apply $GITHUB_WORKSPACE/devtools/patches/link_args.patch
          git apply $GITHUB_WORKSPACE/devtools/patches/linux_cuda_rpath.patch

      - name: "Configure build with CMake"
        shell: bash -l {0}
        run: |
          cd openmm
          mkdir build
          cd build
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=${HOME}/openmm-install \
            -DCMAKE_CXX_FLAGS='-D_GLIBCXX_USE_CXX11_ABI=0' \
            -DOPENMM_BUILD_OPENCL_LIB=ON \
            -DOPENCL_INCLUDE_DIR=/usr/include/CL \
            -DOPENCL_LIBRARY=/usr/lib64/libOpenCL.so.1 \
            -DCMAKE_POLICY_VERSION_MINIMUM=3.5

      - name: "Build OpenMM"
        shell: bash -l {0}
        run: |
          cd openmm/build
          make -j4 install
          make -j4 PythonInstall

      - name: "Build wheel"
        shell: bash -l {0}
        run: |
          cd openmm/build
          export CUDA_VERSION=$(cut -d '-' -f1 <<< ${{ matrix.cuda-version }})
          export HIP_VERSION=${{ matrix.hip-version }}
          make PythonBdistWheel
          export LD_LIBRARY_PATH=${HOME}/openmm-install/lib
          cd python/dist
          python $GITHUB_WORKSPACE/devtools/scripts/add_plugins_and_headers.py "${HOME}/openmm-install" "!CUDA" "!HIP"
          auditwheel repair -w fixed -L ".libs/lib" --plat manylinux_2_28_x86_64 *.whl \
            --exclude libOpenMM.so \
            --exclude libOpenMMCUDA.so \
            --exclude libOpenMMHIP.so \
            --exclude libOpenMMOpenCL.so \
            --exclude libOpenMMDrude.so \
            --exclude libOpenMMAmoeba.so \
            --exclude libOpenMMRPMD.so \
            --exclude libOpenCL.so.1 \
            --exclude libcuda.so.1 \
            --exclude libcufft.so.11 \
            --exclude libcufft.so.10 \
            --exclude libnvrtc.so.11.2 \
            --exclude libnvrtc.so.12 \
            --exclude libhiprtc.so.6 \
            --exclude libamdhip64.so.6

      - name: "Build CUDA wheel"
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE/devtools/cuda
          export OPENMM_VERSION=$(echo $(grep "OPENMM_VERSION:" $GITHUB_WORKSPACE/openmm/build/CMakeCache.txt) | cut -d '=' -f2)$VERSION_SUFFIX
          export CUDA_VERSION=$(cut -d '-' -f1 <<< ${{ matrix.cuda-version }})
          python setup.py bdist_wheel
          cd dist
          python $GITHUB_WORKSPACE/devtools/scripts/add_plugins_and_headers.py "${HOME}/openmm-install" "CUDA"
          mv *.whl $GITHUB_WORKSPACE/openmm/build/python/dist/fixed

      - name: "Build HIP wheel"
        shell: bash -l {0}
        run: |
          cd $GITHUB_WORKSPACE/devtools/hip
          export OPENMM_VERSION=$(echo $(grep "OPENMM_VERSION:" $GITHUB_WORKSPACE/openmm/build/CMakeCache.txt) | cut -d '=' -f2)$VERSION_SUFFIX
          export HIP_VERSION=${{ matrix.hip-version }}
          python setup.py bdist_wheel
          cd dist
          python $GITHUB_WORKSPACE/devtools/scripts/add_plugins_and_headers.py "${HOME}/openmm-install" "HIP"
          mv *.whl $GITHUB_WORKSPACE/openmm/build/python/dist/fixed

      - name: "Rename wheels"
        shell: bash -l {0}
        run: |
          python $GITHUB_WORKSPACE/devtools/scripts/rename_wheels.py $GITHUB_WORKSPACE/openmm/build/python/dist/fixed

      - name: "Test the wheel"
        shell: bash -l {0}
        run: |
          set -x
          python -m venv "${HOME}/test_env"
          source "${HOME}/test_env/bin/activate"
          cd openmm/build/python/dist
          export CUDA_VERSION=$(cut -d '-' -f1 <<< ${{ matrix.cuda-version }})
          pip install --pre -f fixed openmm[cuda${CUDA_VERSION},hip${{ matrix.hip-version }}]
          python -m openmm.testInstallation
          python -c "import openmm as mm; print(mm.version.openmm_library_path)"
          python -c "import openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Upload the wheel"
        uses: actions/upload-artifact@v4
        with:
          name: openmm-wheel-linux-${{matrix.python-version}}-cuda-${{matrix.cuda-version}}
          path: openmm/build/python/dist/fixed
          retention-days: 10

  windows:
    runs-on: ${{ matrix.os }}
    name: "${{ matrix.name }} ${{ matrix.python-version}} CUDA ${{ matrix.cuda-version }} HIP ${{ matrix.hip-version }}"
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12", "3.13"]
        cuda-version: ["12.5.0", "13.0.0"]
        name: [Windows x86]
        os: [windows-latest]
        requirements: [windows]
        include:
          - cuda-version: "12.5.0"
            hip-version: "6"
          - cuda-version: "13.0.0"
            hip-version: "6"

    steps:
      - uses: actions/checkout@v3

      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: build-env
          create-args: >-
            python=${{ matrix.python-version }}
          init-shell: bash cmd.exe powershell

      - name: "Install dependencies with pip"
        shell: cmd /C call {0}
        run: pip install -v -r devtools/requirements/${{ matrix.requirements }}.txt

      - name: "Install dependencies with choco"
        uses: crazy-max/ghaction-chocolatey@v3
        with:
          args:
            install doxygen.install jom

      - name: "Install CUDA"
        uses: Jimver/cuda-toolkit@v0.2.24
        id: cuda-toolkit
        with:
          cuda: ${{matrix.cuda-version}}
          method: 'network'
          sub-packages: '["nvcc", "nvrtc", "nvrtc_dev", "cufft", "cufft_dev", "opencl", "cudart", "cuda_profiler_api"]'

      - name: "Install HIP"
        shell: cmd /C call {0}
        run: |
          curl.exe --output HIP.exe --url https://download.amd.com/developer/eula/rocm-hub/AMD-Software-PRO-Edition-25.Q3-Win10-Win11-For-HIP.exe
          HIP.exe -install

      - name: "Check out OpenMM source code"
        shell: cmd /C call {0}
        run: |
          git clone https://github.com/openmm/openmm.git
          cd openmm
          git checkout %GIT_REVISION%
          git apply %GITHUB_WORKSPACE%\devtools\patches\library_path.patch
          git apply %GITHUB_WORKSPACE%\devtools\patches\cxx11_abi.patch
          git apply %GITHUB_WORKSPACE%\devtools\patches\extras_require.patch

      - name: "Configure build with CMake"
        shell: cmd /C call {0}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cd openmm
          mkdir build
          cd build
          cmake -G "NMake Makefiles JOM" ^
                -DCMAKE_BUILD_TYPE=Release ^
                -DCMAKE_INSTALL_PREFIX=%USERPROFILE%/openmm-install ^
                -DCMAKE_PREFIX_PATH="%USERPROFILE%/openmm-install;C:\Program Files\AMD\ROCm\6.1" ^
                -DCMAKE_CXX_COMPILER=cl.exe ^
                -DCMAKE_C_COMPILER=cl.exe ^
                -DOPENCL_INCLUDE_DIR="${{steps.cuda-toolkit.outputs.CUDA_PATH}}/include" ^
                -DOPENCL_LIBRARY="${{steps.cuda-toolkit.outputs.CUDA_PATH}}/lib/x64/OpenCL.lib" ^
                -DHIP_PLATFORM=amd ^
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5 ^
                ..

      - name: "Build OpenMM"
        shell: cmd /C call {0}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cd openmm\build
          jom -j 4 install
          jom -j 4 PythonInstall

      - name: "Build wheel"
        shell: cmd /C call {0}
        run: |
          cd openmm\build
          set FULL_CUDA_VERSION=${{ matrix.cuda-version }}
          set CUDA_VERSION=%FULL_CUDA_VERSION:~0,2%
          set HIP_VERSION=${{ matrix.hip-version }}
          jom PythonBdistWheel
          cd python\dist
          python %GITHUB_WORKSPACE%\devtools\scripts\add_plugins_and_headers.py "%USERPROFILE%\openmm-install" "!CUDA" "!HIP"

      - name: "Build CUDA wheel"
        shell: cmd /C call {0}
        run: |
          cd %GITHUB_WORKSPACE%\devtools\cuda
          findstr "OPENMM_VERSION:STRING=" %GITHUB_WORKSPACE%\openmm\build\CMakeCache.txt > version.txt
          set /P OPENMM_VERSION_LINE= < version.txt
          set OPENMM_VERSION=%OPENMM_VERSION_LINE:~22%%VERSION_SUFFIX%
          set FULL_CUDA_VERSION=${{ matrix.cuda-version }}
          set CUDA_VERSION=%FULL_CUDA_VERSION:~0,2%
          python setup.py bdist_wheel
          cd dist
          python %GITHUB_WORKSPACE%\devtools\scripts\add_plugins_and_headers.py "%USERPROFILE%\openmm-install" "CUDA"
          move *.whl %GITHUB_WORKSPACE%\openmm\build\python\dist

      - name: "Build HIP wheel"
        shell: cmd /C call {0}
        run: |
          cd %GITHUB_WORKSPACE%\devtools\hip
          findstr "OPENMM_VERSION:STRING=" %GITHUB_WORKSPACE%\openmm\build\CMakeCache.txt > version.txt
          set /P OPENMM_VERSION_LINE= < version.txt
          set OPENMM_VERSION=%OPENMM_VERSION_LINE:~22%%VERSION_SUFFIX%
          set HIP_VERSION=${{ matrix.hip-version }}
          python setup.py bdist_wheel
          cd dist
          python %GITHUB_WORKSPACE%\devtools\scripts\add_plugins_and_headers.py "%USERPROFILE%\openmm-install" "HIP"
          move *.whl %GITHUB_WORKSPACE%\openmm\build\python\dist

      - name: "Rename wheels"
        shell: cmd /C call {0}
        run: |
          python %GITHUB_WORKSPACE%\devtools\scripts\rename_wheels.py %GITHUB_WORKSPACE%\openmm\build\python\dist

      - name: "Test the wheel"
        shell: cmd /C call {0}
        run: |
          python -m venv "%USERPROFILE%\test_env"
          cd openmm\build\python\dist
          set FULL_CUDA_VERSION=${{ matrix.cuda-version }}
          set CUDA_VERSION=%FULL_CUDA_VERSION:~0,2%
          %USERPROFILE%\test_env\Scripts\pip install "numpy"
          %USERPROFILE%\test_env\Scripts\pip install --pre --find-links . openmm[cuda%CUDA_VERSION%,hip${{ matrix.hip-version }}]
          %USERPROFILE%\test_env\Scripts\python -m openmm.testInstallation
          %USERPROFILE%\test_env\Scripts\python -c "import openmm as mm; print(mm.version.openmm_library_path)"
          %USERPROFILE%\test_env\Scripts\python -c "import openmm as mm; print('---Loaded---', *mm.pluginLoadedLibNames, '---Failed---', *mm.Platform.getPluginLoadFailures(), sep='\n')"

      - name: "Upload the wheel"
        uses: actions/upload-artifact@v4
        with:
          name: openmm-wheel-windows-${{matrix.python-version}}-cuda-${{matrix.cuda-version}}
          path: openmm\build\python\dist
          retention-days: 10
